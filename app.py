{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "44959ae7",
   "metadata": {},
   "source": [
    "# Data Visualization Project\n",
    "\n",
    "- Name: João Quental Gonçalves\n",
    "- Number: 20211295"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "351d168b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.colors as colors\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px\n",
    "import plotly.offline as pyo\n",
    "import seaborn as sns\n",
    "import dash\n",
    "import mplcursors\n",
    "from dash import dcc\n",
    "from dash import html\n",
    "from dash.dependencies import Input, Output\n",
    "from plotly.subplots import make_subplots\n",
    "import ipywidgets as widgets\n",
    "from IPython.display import display\n",
    "from sklearn.metrics import r2_score\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "74609859",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('Serie_A_Payrolls.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4d622178",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Classification</th>\n",
       "      <th>Points</th>\n",
       "      <th>Payrolls: Gross P/Y (EUR, 000's)</th>\n",
       "      <th>Games</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>280.000000</td>\n",
       "      <td>280.000000</td>\n",
       "      <td>260.000000</td>\n",
       "      <td>280.000000</td>\n",
       "      <td>280.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>140.500000</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>52.038462</td>\n",
       "      <td>45996.196429</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>80.973247</td>\n",
       "      <td>5.776606</td>\n",
       "      <td>17.513328</td>\n",
       "      <td>39398.557332</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>6048.000000</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>70.750000</td>\n",
       "      <td>5.750000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>20632.750000</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>140.500000</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>31898.000000</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>210.250000</td>\n",
       "      <td>15.250000</td>\n",
       "      <td>63.250000</td>\n",
       "      <td>55680.000000</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>280.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>102.000000</td>\n",
       "      <td>255540.000000</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               ID  Classification      Points  \\\n",
       "count  280.000000      280.000000  260.000000   \n",
       "mean   140.500000       10.500000   52.038462   \n",
       "std     80.973247        5.776606   17.513328   \n",
       "min      1.000000        1.000000   17.000000   \n",
       "25%     70.750000        5.750000   40.000000   \n",
       "50%    140.500000       10.500000   49.000000   \n",
       "75%    210.250000       15.250000   63.250000   \n",
       "max    280.000000       20.000000  102.000000   \n",
       "\n",
       "       Payrolls: Gross P/Y (EUR, 000's)  Games  \n",
       "count                        280.000000  280.0  \n",
       "mean                       45996.196429   38.0  \n",
       "std                        39398.557332    0.0  \n",
       "min                         6048.000000   38.0  \n",
       "25%                        20632.750000   38.0  \n",
       "50%                        31898.000000   38.0  \n",
       "75%                        55680.000000   38.0  \n",
       "max                       255540.000000   38.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9fcd18d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# group the data by season and club, and calculate the sum of points and payrolls\n",
    "grouped_df = df.groupby(['Season', 'Club'])[['Points', 'Payrolls: Gross P/Y (EUR, 000\\'s)']].sum()\n",
    "\n",
    "# reset the index to make the grouped columns become regular columns\n",
    "grouped_df = grouped_df.reset_index()\n",
    "\n",
    "# add a column for the total points per season\n",
    "grouped_df['Total Points'] = grouped_df.groupby('Season')['Points'].transform('sum')\n",
    "\n",
    "# add a column for the total payrolls per season\n",
    "grouped_df['Total Payrolls'] = grouped_df.groupby('Season')['Payrolls: Gross P/Y (EUR, 000\\'s)'].transform('sum')\n",
    "\n",
    "# calculate the relative frequency of points and payrolls\n",
    "grouped_df['Relative Frequency of Points'] = grouped_df['Points'] / grouped_df['Total Points']\n",
    "grouped_df['Relative Frequency of Payrolls'] = grouped_df['Payrolls: Gross P/Y (EUR, 000\\'s)'] / grouped_df['Total Payrolls']\n",
    "\n",
    "# create a new DataFrame with the desired columns\n",
    "rel_freq_df = grouped_df[['Season', 'Club', 'Relative Frequency of Points', 'Relative Frequency of Payrolls']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e4d2e24d",
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_rel_freq_df = pd.DataFrame(columns=rel_freq_df.columns)\n",
    "\n",
    "# loop over each season in the original dataframe\n",
    "for season in rel_freq_df['Season'].unique():\n",
    "    \n",
    "    # extract the rows for the current season and sort by relative frequency of points\n",
    "    season_df = rel_freq_df.loc[rel_freq_df['Season'] == season]\n",
    "    sorted_season_df = season_df.sort_values(by='Relative Frequency of Points', ascending=False)\n",
    "    \n",
    "    # add the sorted rows to the new dataframe\n",
    "    sorted_rel_freq_df = pd.concat([sorted_rel_freq_df, sorted_season_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "34033619",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove the 2022-2023 season\n",
    "sorted_rel_freq_df = sorted_rel_freq_df[sorted_rel_freq_df['Season'] != '2022-2023']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b2b8a58f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the app\n",
    "app = dash.Dash(__name__)\n",
    "app.title = \"Serie A\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5243900e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the dropdown menu with the seasons\n",
    "seasons = sorted_rel_freq_df['Season'].unique()\n",
    "season_options = [{'label': 'All Seasons', 'value': 'All Seasons'}] + [{'label': season, 'value': season} for season in seasons]\n",
    "season_dropdown = dcc.Dropdown(\n",
    "    id='season-dropdown',\n",
    "    options=season_options,\n",
    "    value='All Seasons',\n",
    "    clearable=False,\n",
    "    style={\n",
    "        'width': '900px',\n",
    "        'height': '35px',\n",
    "        'textAlign': 'center',\n",
    "        'margin': 'auto'\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2d3fc4e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the dropdown menu with the clubs\n",
    "clubs = sorted_rel_freq_df['Club'].unique()\n",
    "club_options = [{'label': 'All Clubs', 'value': 'All Clubs'}] + [{'label': club, 'value': club} for club in clubs]\n",
    "club_dropdown = dcc.Dropdown(\n",
    "    id='club-dropdown',\n",
    "    options=club_options,\n",
    "    value='All Clubs',\n",
    "    clearable=False,\n",
    "    style={\n",
    "        'width': '900px',\n",
    "        'height': '35px',\n",
    "        'textAlign': 'center',\n",
    "        'margin': 'auto'\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9cb8654a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the callback function to update the scatter plot when the dropdown values change\n",
    "@app.callback(Output('scatter-plot', 'figure'), [Input('season-dropdown', 'value'), Input('club-dropdown', 'value')])\n",
    "def update_figure(selected_season, selected_club):\n",
    "    if selected_season == 'All Seasons':\n",
    "        filtered_df = sorted_rel_freq_df\n",
    "        title = 'Relative Frequency of Payrolls and Points by Club (2009-2010 to 2021-2022)'\n",
    "    else:\n",
    "        filtered_df = sorted_rel_freq_df[sorted_rel_freq_df['Season'] == selected_season]\n",
    "        title = f'Relative Frequency of Payrolls and Points by Club in {selected_season}'\n",
    "    \n",
    "    if selected_club != 'All Clubs':\n",
    "        filtered_df = filtered_df[filtered_df['Club'] == selected_club]\n",
    "        title += f' for {selected_club}'\n",
    "    \n",
    "    fig = px.scatter(filtered_df, x='Relative Frequency of Payrolls', y='Relative Frequency of Points', color='Season',\n",
    "                     hover_data=['Club'], trendline='ols', trendline_scope='overall')\n",
    "    \n",
    "    # Add a power trendline to the scatter plot\n",
    "    x = filtered_df['Relative Frequency of Payrolls']\n",
    "    y = filtered_df['Relative Frequency of Points']\n",
    "    mask = ~np.isnan(x) & ~np.isnan(y)\n",
    "    z = np.polyfit(np.log(x[mask]), np.log(y[mask]), 1)\n",
    "    p = np.poly1d(z)\n",
    "    trendline_x = np.linspace(min(x), max(x), 100)\n",
    "    trendline_y = np.exp(p(np.log(trendline_x)))\n",
    "    fig.add_trace(go.Scatter(x=trendline_x, y=trendline_y, mode='lines', line=dict(dash='dash'), name='Power Trendline'))\n",
    "    \n",
    "    # Add a linear trendline to the scatter plot\n",
    "    linear_trendline_summary = px.get_trendline_results(fig)\n",
    "    linear_r_squared = linear_trendline_summary.iloc[0]['px_fit_results'].rsquared\n",
    "    linear_trendline_eq = f'y = {linear_trendline_summary.iloc[0][\"px_fit_results\"].params[1]:.2f}x + {linear_trendline_summary.iloc[0][\"px_fit_results\"].params[0]:.2f}, R² = {linear_r_squared:.2f}'\n",
    "    fig.add_annotation(x=0.20, y=0.14, xanchor='right', yanchor='bottom', showarrow=False,\n",
    "                        text=linear_trendline_eq, font=dict(size=12, color='black'))\n",
    "    \n",
    "    # Add the R-squared value for the power trendline\n",
    "    power_r_squared = r2_score(np.log(y[mask]), p(np.log(x[mask])))\n",
    "    power_trendline_eq = f'y = {np.exp(p[0]):.2f}x^{p[1]:.2f}, R² = {power_r_squared:.2f}'\n",
    "    fig.add_annotation(x=0.20, y=0.12, xanchor='right', yanchor='bottom', showarrow=False,\n",
    "                        text=power_trendline_eq, font=dict(size=12, color='black'))\n",
    "    \n",
    "    return fig\n",
    "\n",
    "# Calculate the pivot tables\n",
    "pivot_df1 = sorted_rel_freq_df.pivot(index='Season', columns='Club', values='Relative Frequency of Payrolls')\n",
    "pivot_df2 = sorted_rel_freq_df.pivot(index='Season', columns='Club', values='Relative Frequency of Points')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "36aea7e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      " * Serving Flask app '__main__'\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on http://127.0.0.1:8050\n",
      "Press CTRL+C to quit\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:50] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:50] \"GET /_dash-dependencies HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:50] \"GET /_dash-layout HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:50] \"GET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1\" 304 -\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:50] \"GET /_dash-component-suites/dash/dcc/async-plotlyjs.js HTTP/1.1\" 304 -\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:50] \"GET /_favicon.ico?v=2.9.2 HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:50] \"GET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1\" 304 -\n",
      "127.0.0.1 - - [10/Apr/2023 00:21:51] \"POST /_dash-update-component HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "# Define the layout of the dashboard\n",
    "app.layout = html.Div(children=[\n",
    "    # Define the header of the dashboard\n",
    "    html.H1(children='Italian Serie A Clubs Dashboard', style={\"textAlign\": \"center\", \"fontFamily\": \"Arial\", \"fontWeight\": \"normal\"}),\n",
    "    # Define a subheader for the dashboard\n",
    "    html.Div(children='''Visualizing payroll and points for Italian Serie A Clubs (2009-2010 to 2022-2023).''', \n",
    "             style={\"textAlign\": \"center\", \"marginBottom\": \"25px\", \"fontSize\": \"20px\", \"fontFamily\": \"Arial\", \"fontWeight\": \"normal\"}),\n",
    "    # Define the main content of the dashboard, consisting of divs\n",
    "    html.Div(children=[\n",
    "        # Define a div containing a dcc.Graph component for payroll heatmap\n",
    "        html.Div(children=[   \n",
    "            dcc.Graph(\n",
    "                # Set an id for the graph component\n",
    "                id='payroll_heatmap',\n",
    "                # Create a heatmap using px.imshow and set the relevant parameters\n",
    "                figure=px.imshow(pivot_df1*100, # The data to be used in the heatmap\n",
    "                                 title='% Payroll by Season for Italian Serie A Clubs (2009-2023)', # The title of the heatmap\n",
    "                                 labels={'x': 'Club', 'y': 'Season'},  # The axis labels\n",
    "                                 x=pivot_df1.columns, # The data for the x-axis\n",
    "                                 y=pivot_df1.index, # The data for the y-axis\n",
    "                                 color_continuous_scale='YlOrRd', # The color scale for the heatmap\n",
    "                                 range_color=[0, 21], # The range of values to be mapped to the color scale\n",
    "                                 height=450, # The height of the heatmap (only affects the color panel)\n",
    "                                ).update_layout(\n",
    "                                        # Update the layout of the heatmap\n",
    "                                                xaxis={'tickmode': 'array', 'tickvals': pivot_df1.columns.tolist(), 'title': {'text': 'Club', 'font': {'size': 12}}, 'showgrid': False, 'gridcolor': 'black'},\n",
    "                                                yaxis={'tickmode': 'array', 'tickvals': pivot_df1.index.tolist(), 'title': {'text': 'Season', 'font': {'size': 12}}, 'showgrid': False, 'gridcolor': 'black'}, \n",
    "                                                margin={'t': 20, 'b': 20, 'l': 20, 'r': 20}, # The margins of the heatmap\n",
    "                                                title_font={'size': 13}, # The font size of the title\n",
    "                                                title_x=0.5, # The horizontal alignment of the title\n",
    "                                                dragmode='select', # The drag mode for the heatmap\n",
    "                                                hovermode='closest', # The hover mode for the heatmap\n",
    "                                                uirevision='foo', # A string that changes when the layout changes\n",
    "                                                plot_bgcolor='#000000', # The background color of the heatmap\n",
    "                                                paper_bgcolor='#000000')  # The background color of the paper\n",
    "            ),\n",
    "        ], style={'width': '55%', # The width of the div\n",
    "                  'height': '500px', # The height of the div\n",
    "                  'display': 'inline-block', # The display mode of the div\n",
    "                  'textAlign': 'center'}), # The alignment of the div contents\n",
    "        html.Div(children=[\n",
    "            dcc.Graph(\n",
    "                id='points_heatmap',\n",
    "                figure=px.imshow(pivot_df2*100, title='% Points by Season for Italian Serie A Clubs (2009-2023)', \n",
    "                                 labels={'x': 'Club', 'y': 'Season'}, x=pivot_df2.columns, y=pivot_df2.index,\n",
    "                                 color_continuous_scale='Greens', range_color=[0, 10], height=450\n",
    "                                ).update_layout(xaxis={'tickmode': 'array', 'tickvals': pivot_df2.columns.tolist(), 'title': {'text': 'Club', 'font': {'size': 12}}, 'showgrid': False, 'gridcolor': 'black'},\n",
    "                                                 yaxis={'tickmode': 'array', 'tickvals': pivot_df2.index.tolist(), 'title': {'text': 'Season', 'font': {'size': 12}}, 'showgrid': False, 'gridcolor': 'black'}, \n",
    "                                                 margin={'t': 20, 'b': 20, 'l': 20, 'r': 20},\n",
    "                                                 title_font={'size': 13},\n",
    "                                                 title_x=0.5,\n",
    "                                                 dragmode='select',\n",
    "                                                 hovermode='closest',\n",
    "                                                 uirevision='foo',\n",
    "                                                 plot_bgcolor='#000000',\n",
    "                                                 paper_bgcolor='#000000')\n",
    "            ),\n",
    "        ], style={'width': '55%', 'height': '500px', 'display': 'inline-block', 'textAlign': 'center'})\n",
    "     ], style={'display': 'flex', 'justifyContent': 'center', 'flexWrap': 'wrap'}),\n",
    "   # Define a div for the scatter plot and dropdowns\n",
    "        html.Div(children=[\n",
    "            # Define a header for the scatter plot div\n",
    "            html.H1('Payrolls vs Points in Italian Serie A (2009-2010 to 2021-2022)',\n",
    "                        style={\"textAlign\": \"center\", \"marginBottom\": \"25px\", \"fontSize\": \"20px\", \"fontFamily\": \"Arial\", \"fontWeight\": \"normal\"}),\n",
    "                        # Define a dcc.Graph component for the scatter plot\n",
    "                        dcc.Graph(id='scatter-plot',\n",
    "                        style={\n",
    "                            'backgroundColor': '#000000',\n",
    "                            'height': '500px',\n",
    "                            'width': '900px',\n",
    "                            'margin': 'auto',\n",
    "                            'opacity': '0.9'}, \n",
    "                                 ),\n",
    "                        # Define the dropdown components for selecting a season and club\n",
    "                        season_dropdown,\n",
    "                        club_dropdown])\n",
    "], style={'backgroundColor': '#000000'} # Define background color for the dashboard\n",
    "                     )\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "34faf8c3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "57545794",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "4a776735",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
